#!/usr/bin/env node

// modules
var program = require('commander');
var sh = require('execSync');
var exec = require('child_process').exec;
var spawn = require('child_process').spawn;
var clc = require('cli-color');
var Client = require('ftp');
var fs = require('fs');
var ncp = require('ncp').ncp;

// options and arguments
program
  .version('0.0.1')
  .option('-c, --config <type>', 'Config file in JSON E.g. publish.json')
  .parse(process.argv);

if (program.config) {

  // Read config file
  var configFile = program.config;
  var data = fs.readFileSync(configFile);

  data = JSON.parse(data);
  console.log(clc.red('Data from the config file:'));
  data.folder = data.num + '-' + data.episodeLowercase;
  data.video = data.folder + '.mp4';
  data.path = 'public_html/build/videos/' + data.video;
  data.title = 'Build Podcast ' + data.num + ' ' + data.episode;
  data.description = 'Show notes: http://build-podcast.com/' + data.episodeLowercase;
  data.postFile = data.repoPath + '_posts/' + data.postDate + '-' + data.episodeLowercase + '.md';
  console.log(data);

  var c = new Client();
  var source = data.desktopPath + data.episodeLowercase;
  var destination = data.repoPath + data.num + '-' + data.episodeLowercase;
  var isUploadedToYoutube = false;
  var isVideoNormalised = false;

  // Stop Apache server
  console.log(clc.blue('Stopping Apache server. Please put your password'));
  sh.run('sudo apachectl stop');
  console.log(clc.red('Stopped apache server'));

  // Normalise video
  console.log(clc.blue('Normalising the audio in the screencast video file'));
  sh.run('norm ' + data.video);
  console.log(clc.red('Normalised video: ' + data.video));

  // Upload video via FTP
  console.log(clc.blue('Uploading video with FTP'));
  c.on('ready', function() {
    c.put(data.video, data.path , function(err) {
      if (err) throw err;
      c.end();
      console.log(clc.red('Video file uploaded: http://video.build-podcast.com/' + data.video));
      spawn('open', [ 'http://video.build-podcast.com/'.concat(data.video) ]);
      isVideoNormalised = true;
      updatePost();
    });
  });
  c.connect(data);

  // Upload video to YouTube and add to playlist
  console.log(clc.blue('Uploading video to Youtube'));
  exec(
    'youtube-upload --email=' + data.youtubeEmail + ' --password=' + data.youtubePassword + ' --title="' + data.title + '" --description="' + data.description + '" --category="Tech" --keywords="' + data.tags + '" ' + data.video,
    function(err, stdout, stderr) {

      if (err) throw err;
      console.log(clc.red('Youtube video url: ' + stdout));
      spawn('open', [ stdout ]);

      exec(
        'youtube-upload --email=' + data.youtubeEmail + ' --password=' + data.youtubePassword + ' --add-to-playlist=' + data.youtubePlaylist + ' ' + stdout,
        function(err, stdout, stderr) {
          if (err) throw err;
          console.log(clc.red('Youtube video added to playlist: ' + data.youtubePlaylistURL));
          spawn('open', [ data.youtubePlaylistURL ]);
      });
  });

  // Upload video to Vimeo

  // Copy demo source code to repo
  ncp(source, destination, function (err) {
    if (err) {
      return console.error(err);
    }
    console.log('Demo source code files are transferred.');
  });

  // Update post with tag and length information
  function updatePost() {
    fs.stat(data.video , function (err, stats) {
      var videoSize = stats.size;

      fs.readFile(data.postFile, 'utf8', function(err, fileContents) {

        if (err) {return console.log(err); }
        fileContents = fileContents.replace(/{{LENGTH}}/g, videoSize);
        fileContents = fileContents.replace(/{{TAGS}}/g, data.tags);

        fs.writeFile(data.postFile, fileContents, 'utf8', function(err) {
          if (err) throw err;
          console.log(clc.red('Meta data length and tags are added to the Post.'));
        });

      });
    });
  }

  // Commit and push to github pages

} else {
  console.log('Missing arguments :(');
  program.help();
}
