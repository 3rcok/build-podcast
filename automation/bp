#!/usr/bin/env node

// downloads
// brew install ffmeg sox
// https://code.google.com/p/youtube-upload/downloads/list
// https://code.google.com/p/gdata-python-client/downloads/list

var defaultConfigFile = '/Users/sayanee/Workspace/build-podcast/episode.json';

var program = require('commander');
var exec = require('child_process').exec;
var sh = require('execSync');
var clc = require('cli-color');
var fs = require('fs');
var prompt = require('prompt');
var spawn = require('child_process').spawn;
var Client = require('ftp');
var ncp = require('ncp').ncp;

program.version('0.2.0');

// bp new
program
  .command('new [configFile]')
  .description('start a brand new episode with configuration data')
  .action(function(configFile) {
    var config, shellReturn, newReadme, templateReadme, newPost, templatePost;

    if (!configFile){
      configFile = defaultConfigFile;
    }
    config = extractConfig(configFile);

    // edit _config.yml
    fs.readFile(config.configYMLFile, 'utf8', function(error, data) {
      if(error) { console.error(error); }

      var pastEpisode = '\'' + config.prevEpisodeNum + '-' + config.prevEpisode + '\'';
      var re = new RegExp(pastEpisode,'g');

      data = data.replace(re, pastEpisode + ',\n  \'' + config.num + '-' + config.episodeLowercase + '\'');

      fs.writeFile(config.configYMLFile, data, 'utf8', function(error) {
        if (error) console.log('Write to _config.yml:  ' + error);
        console.log('_config.yml included the current episode directory to ignore.');
      });
    });

    // edit _dev_config.yml
    fs.readFile(config.devConfigYMLFile, 'utf8', function(error, data) {
      if (error) { console.log(error); }

      var pastEpisode = '\'' + config.prevEpisodeNum + '-' + config.prevEpisode + '\'';
      var re = new RegExp(pastEpisode,'g');

      data = data.replace(re, pastEpisode + ',\n  \'' + config.num + '-' + config.episodeLowercase + '\'');

      fs.writeFile(config.devConfigYMLFile, data, 'utf8', function(error) {
        if (error) console.log('Write to _dev_config.yml:  ' + error);
        console.log('_dev_config.yml included the current episode directory to ignore.');
      });
    });

    // make new folder for demo code
    shellReturn = sh.exec('mkdir ' + config.repoDir + config.num + '-' + config.episodeLowercase);
    if (shellReturn.code === 0) console.log('Created new sample code directory')
    else console.log('Failed to create new sample code directory:\n' + shellReturn.stdout);

    // make new folder in desktop to be used during recording
    shellReturn = sh.exec('mkdir ' + config.desktopDir + config.episodeLowercase);
    if (shellReturn.code === 0) console.log('Created new sample code directory in desktop')
    else console.log('Failed to create new sample code directory in desktop:\n' + shellReturn.stdout);

    // open desktop folder
    shellReturn = sh.exec('open ' + config.desktopDir + config.episodeLowercase);
    if (shellReturn.code === 0) console.log('Opened sample code directory in desktop')
    else console.log('Failed to open new sample code directory in desktop:\n' + shellReturn.stdout);

    // open desktop folder in text editor
    shellReturn = sh.exec('subl ' + config.desktopDir + config.episodeLowercase);
    if (shellReturn.code === 0) console.log('Opened sample code directory in desktop in text editor')
    else console.log('Failed to open new sample code directory in desktop in text editor:\n' + shellReturn.stdout);

    newReadme = config.repoDir + config.num + '-' + config.episodeLowercase + '/' + config.readme;
    templateReadme = config.repoDir + config.templateDir + config.readme;

    shellReturn = sh.exec('open ' + config.repoDir + config.num + '-' + config.episodeLowercase);
    if (shellReturn.code === 0) console.log('Opened sample code directory ')
    else console.log('Failed to open sample code directory:\n' + shellReturn.stdout);

    // make readme from template
    shellReturn = sh.exec('cp ' + templateReadme + ' ' + newReadme);
    if (shellReturn.code === 0) console.log('Copied sample code readme from template')
    else console.log('Failed to copy sample code readme from template:\n' + shellReturn.stdout);

    fs.readFile(newReadme, 'utf8', function(error, data) {
      if (error) { console.log(error); }
      data = data.replace(/{{NUM}}/g, config.num);
      data = data.replace(/{{EPISODE}}/g, config.episode);
      data = data.replace(/{{EPISODE_LOWERCASE}}/g, config.episodeLowercase);

      fs.writeFile(newReadme, data, 'utf8', function(error) {
        if (error) console.log('Write to new readme.md:  ' + error);
        console.log('Sample code readme created with episode data');
      });

    });

    // make show notes post from template
    templatePost = config.repoDir + config.templateDir + config.templatePost;
    newPost = config.postDate + '-' + config.episodeLowercase + '.md';

    shellReturn = sh.exec('cp ' + templatePost + ' ' + newPost);
    if (shellReturn.code === 0) console.log('Copied sample post from template')
    else console.log('Failed to copy sample post from template:\n' + shellReturn.stdout);

    fs.readFile(newPost, 'utf8', function(error, data) {
      if (error) {return console.log(error); }
      data = data.replace(/{{NUM}}/g, config.num);
      data = data.replace(/{{EPISODE}}/g, config.episode);
      data = data.replace(/{{EPISODE_LOWERCASE}}/g, config.episodeLowercase);

      fs.writeFile(newPost, data, 'utf8', function(error) {
        if (error) console.log('Write a new post file: ' + error);
        sh.run('cp ' + newPost + ' ' + config.postFile + ' && rm ' + newPost);
        sh.run('open ' + config.postFile);
      });

    });

    // open tower version control
    shellReturn = sh.exec('open ' + config.app.tower);
    if (shellReturn.code === 0) console.log('Opened Tower')
    else console.log('Failed to open tower:\n' + shellReturn.stdout);
  });

// bp open
program
  .command('open [configFile]')
  .description('run an on-going episode with configuration data')
  .action(function(configFile) {
    if (!configFile){
      configFile = defaultConfigFile;
    }

    var config = extractConfig(configFile);
    var shellReturn;

    // open post folder
    shellReturn = sh.exec('open ' + config.postDir);
    if (shellReturn.code === 0) console.log('Opened post folder')
    else console.log('Failed to open post folder: ' + shellReturn.stdout);

    // open post file
    shellReturn = sh.exec('open ' + config.postFile);
    if (shellReturn.code === 0) console.log('Opened episode shownotes')
    else console.log('Failed to open episode shownotes: ' + shellReturn.stdout);

    // open demo directory
    shellReturn = sh.exec('open ' + config.demoDir);
    if (shellReturn.code === 0) console.log('Opened demo directory')
    else console.log('Failed to open demo directory: ' + shellReturn.stdout);

    // open demo directory in text editor
    shellReturn = sh.exec('subl ' + config.demoDir);
    if (shellReturn.code === 0) console.log('Opened demo folder in text editor')
    else console.log('Failed to open demo folder in text editor: ' + shellReturn.stdout);

    console.log(clc.red('On-going episode ' + config.num + ' ' + config.episode +' opened!'));
  });

// bp record
program
  .command('record [configFile]')
  .description('start recording screencast for a new episode with configuration data')
  .action(function(configFile) {
    if (!configFile){
      configFile = defaultConfigFile;
    }

    var config = extractConfig(configFile);
    var startFile = config.repoDir + 'start/index.html';
    var shellReturn;

    prompt.start();

    var property = {
      name: 'yesno',
      message: 'Have you connected the microphone? (y/n) ',
      validator: /y[es]*|n[o]?/,
      warning: 'Must respond yes or no'
    };

    prompt.get(property, function (err, result) {

      if (result.yesno === 'y') {

        // edit start page
        fs.readFile(startFile, 'utf8', function(error, data) {
          if (error) { console.log(error); }

          data = data.replace(/<h1>(.*)<\/h1>/g, '<h1>' + config.num + ' ' + config.episode + '</h1>');
          data = data.replace(/<h4>(.*)<\/h4>/g, '<h4>' + config.tagline + '</h4>');
          data = data.replace(/<h6>(.*)<\/h6>/g, '<h6>Version: ' + config.version + '</h6>');

          fs.writeFile(startFile, data, 'utf8', function(error) {
            if (error) console.log('Write to start file index.html:  ' + error);
            console.log('Start file index.html\'s data is filled in.');
          });
        });

        sh.run('open ' + config.repoDir + 'start');
        sh.run('subl ' + config.repoDir + 'start/index.html');
        sh.run('sudo nginx && open http://dev.build-podcast.com');
        console.log('Start screen is opened at dev.build-podcast.com');

        sh.run('open ' + config.postFile);
        console.log(config.postFile + ' opened for reference');

        sh.run('open "/Applications/QuickTime Player.app"');
        console.log('QuickTime opened for recording');

        sh.run('open "/Applications/Utilities/Audio MIDI Setup.app"');
        console.log('Audio Midi opened for mic adjustment');

        sh.run('osascript -e \'tell app "System Preferences" to set current pane to pane "fr.madrau.switchresx.prefpane"\'');
        console.log('System Preferences opened for screen resolution adjustment');

        console.log(clc.red('Ready to record the show!'));
      }
      else {
        console.log(clc.red('Connect your microphone first and then run: bp record [episode.conf]'));
      }

    });
  });

// bp pub
program
  .command('pub [configFile]')
  .description('publish a screencast for a new episode with configuration data')
  .action(function(configFile) {
    if (!configFile){
      configFile = defaultConfigFile;
    }

    var config = extractConfig(configFile);
    var c = new Client();
    var source = config.desktopDir + config.episodeLowercase;
    var destination = config.repoDir + config.num + '-' + config.episodeLowercase;
    var isVideoNormalised = false;
    var isUploadedToYoutube = false;
    var isUploadedToVimeo = false;
    var isPostUpdated = false;

    // Stop Nginx server
    console.log('Stopping Nginx. Please put your password');
    sh.run('sudo nginx -s stop');
    console.log(clc.red('Stopped nginx'));

    // Normalise video
    console.log(clc.blue('Normalising the audio in the screencast video file'));
    sh.run('mv ' + config.video + ' ' + config.folder + '.mov');
    sh.run('norm ' + config.desktopDir + config.folder + '.mov');
    console.log(clc.blue('Normalised video: ' + config.video));

    prompt.start();

    var property = {
      name: 'yesno',
      message: 'Have you updated episode.json with tags and summary? (y/n) ',
      validator: /y[es]*|n[o]?/,
      warning: 'Must respond yes or no'
    };

    prompt.get(property, function (err, result) {

      if (result.yesno === 'y') {

        // Upload video via FTP
        console.log(clc.yellow('Uploading video with FTP'));
        c.on('ready', function() {
          c.put(config.video, config.path , function(error) {
            if (error) {
              throw({
                toString: function() {
                  return 'ERROR >>>>>>>> Uploading video via FTP:\n' + error;
                }
              });
            }
            c.end();
            console.log(clc.yellow('Video file uploaded to http://video.build-podcast.com/' + config.video));
            spawn('open', [ 'http://video.build-podcast.com/'.concat(config.video) ]);
            isVideoNormalised = true;
            updatePost();
          });
        });
        c.connect(config);

        // Upload video to YouTube and add to playlist
        console.log(clc.green('Uploading video to Youtube'));
        exec(
          'youtube-upload --email=' + config.youtubeEmail + ' --password=' + config.youtubePassword + ' --title="' + config.title + '" --description="' + config.videoDescription + '" --category="Tech" --keywords="' + config.tags + '" ' + config.video,
          function(error, stdout, stderr) {
            if (error) console.log('ERROR >>>>>>>> Uploading video to YouTube:  ' + error);
            console.log(clc.green('Youtube video url: ' + stdout));
            spawn('open', [ stdout ]);

            exec(
              'youtube-upload --email=' + config.youtubeEmail + ' --password=' + config.youtubePassword + ' --add-to-playlist=' + config.youtubePlaylist + ' ' + stdout,
              function(error, stdout, stderr) {
                if (error) console.log('ERROR >>>>>>>> Adding YouTube video to playlist: ' + error);
                console.log(clc.green('Youtube video added to playlist: ' + config.youtubePlaylistURL));
                spawn('open', [ config.youtubePlaylistURL ]);
                isUploadedToYoutube = true;
                pushToGithub();
            });
        });

        // Upload video to Vimeo and add to channel
        exec('vimeo upload ' + defaultConfigFile, function(error, stdout, stderr) {
          if (error) {
            console.log('ERROR >>>>>>>> Uploading video to Vimeo:  ' + error);
          }
          else {
            console.log(stdout);
            isUploadedToVimeo = true;
            pushToGithub();
          }
        });

        // Copy demo source code to repo
        ncp(source, destination, function (error) {
          if (error) console.error('ERROR >>>>>>>> Copying demo source code to repo: ' + error);
          console.log('Demo source code files are transferred.');
        });

        // Update post with tag and length information
        function updatePost() {
          fs.stat(config.video , function (error, stats) {
            var videoSize = stats.size;

            fs.readFile(config.postFile, 'utf8', function(err, fileContents) {

              if (error) console.log('ERROR >>>>>>>> Read file to update meta tags: ' + error);
              fileContents = fileContents.replace(/{{LENGTH}}/g, videoSize);
              fileContents = fileContents.replace(/{{TAGS}}/g, config.tags);
              fileContents = fileContents.replace(/{{DESCRIPTION}}/g, config.summary);

              fs.writeFile(config.postFile, fileContents, 'utf8', function(error) {
                if (error) console.log('ERROR >>>>>>>> Writing meta data:  ' + error);
                console.log(clc.red('Meta data for video length, description and tags are added to the Post.'));
                isPostUpdated = true;
                pushToGithub();
              });

            });
          });
        }

        // Gush to github pages and Jekyll gh-pages branch
        function pushToGithub() {
          if (isPostUpdated == true && isUploadedToYoutube == true && isUploadedToVimeo == true)
          {
            sh.run('open ' + config.app.tower);
            sh.run('cd ' + config.repoDir + ' && git status');
            prompt.start();

            var property = {
              name: 'githubpages',
              message: 'Is the post complete? Have you committed everything? (y/n) ',
              validator: /y[es]*|n[o]?/,
              warning: 'Must respond yes or no'
            };

            prompt.get(property, function (err, result) {

              if (result.githubpages === 'y') {
                // sh.run('cd ' + config.repoDir + ' && git commit ');
                sh.run('open http://github.com/sayanee/build-podcast');
                sh.run('open ' + config.postFile);
              } else {
                console.log('You have uncommitted changes');
              }
            });
          }
        }
      } else {
        console.log(clc.red('Update episode.json file with tags and summary information.'));
      }

    })

  });

program.parse(process.argv);

if (process.argv.length < 3) program.help();

function extractConfig(configFile) {
  var config = fs.readFileSync(configFile);
  config = JSON.parse(config);

  config.folder = config.num + '-' + config.episodeLowercase;
  config.video = config.folder + '.mp4';
  config.path = 'public_html/build/videos/' + config.video;
  config.title = 'Build Podcast ' + config.num + ' ' + config.episode;
  config.videoDescription = 'Show notes: http://build-podcast.com/' + config.episodeLowercase;
  config.repoDir = config.bpDir + config.shownotesDir;
  config.postFile = config.repoDir + '_posts/' + config.postDate + '-' + config.episodeLowercase + '.md';
  config.postDir = config.repoDir + '_posts/';
  config.demoDir = config.desktopDir + config.episodeLowercase;
  config.configYMLFile = config.repoDir + '_config.yml';
  config.devConfigYMLFile = config.repoDir + '_dev_config.yml';

  return config;
}




